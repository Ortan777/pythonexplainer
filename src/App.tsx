import React, { useState, useCallback } from 'react';
import { Code2, FileText, GitBranch, Play } from 'lucide-react';
import CodeEditor from './components/CodeEditor';
import ExplanationView from './components/ExplanationView';
import FlowchartView from './components/FlowchartView';
import AnimationView from './components/AnimationView';
import ExecutionControls from './components/ExecutionControls';
import { isPythonCode, analyzeCode } from './utils/codeAnalyzer';
import { ViewMode, CodeAnalysis, ExecutionState } from './types';

function App() {
  const [code, setCode] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [analysis, setAnalysis] = useState<CodeAnalysis | null>(null);
  const [activeView, setActiveView] = useState<ViewMode>('explanation');
  const [executionState, setExecutionState] = useState<ExecutionState>('idle');

  const handleCodeChange = useCallback((newCode: string) => {
    setCode(newCode);
    setError(null);
    
    if (newCode.trim()) {
      if (!isPythonCode(newCode)) {
        setError('Please enter valid Python code');
        setAnalysis(null);
      } else {
        try {
          const result = analyzeCode(newCode);
          setAnalysis(result);
        } catch (err) {
          setError('Error analyzing code. Please check your Python syntax.');
          setAnalysis(null);
        }
      }
    } else {
      setAnalysis(null);
    }
  }, []);

  const handleExport = useCallback(() => {
    if (!analysis) return;

    const markdown = `# Python Code Explanation

## Code Analysis Summary
- **Complexity:** ${analysis.complexity}
- **Functions:** ${analysis.functions.length}
- **Variables:** ${Object.keys(analysis.variables).length}
- **Imports:** ${analysis.imports.length}

## Imports
${analysis.imports.length > 0 ? analysis.imports.map(imp => `- \`${imp}\``).join('\n') : '_No imports found_'}

## Functions
${analysis.functions.length > 0 ? analysis.functions.map(func => `- \`${func}()\``).join('\n') : '_No functions defined_'}

## Variables
${Object.keys(analysis.variables).length > 0 ? Object.entries(analysis.variables).map(([name, value]) => `- **${name}:** ${value}`).join('\n') : '_No variables found_'}

## Step-by-Step Explanation
${analysis.explanation.map((step, index) => `${index + 1}. ${step}`).join('\n')}

---
*Generated by Code Explainer*
`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'code-explanation.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [analysis]);

  const tabs = [
    { id: 'explanation', label: 'Explanation', icon: FileText },
    { id: 'flowchart', label: 'Flowchart', icon: GitBranch },
    { id: 'animation', label: 'Animation', icon: Play },
  ] as const;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center mr-4">
              <Code2 className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-900">Code Explainer</h1>
          </div>
          <p className="text-gray-600 text-lg max-w-2xl mx-auto">
            Analyze and understand Python code with step-by-step explanations, visual flowcharts, and interactive execution animations.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="space-y-6">
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <CodeEditor 
                code={code}
                onChange={handleCodeChange}
                error={error}
              />
            </div>

            {analysis && (
              <ExecutionControls 
                executionState={executionState}
                onStateChange={setExecutionState}
                onExport={handleExport}
                analysis={analysis}
              />
            )}
          </div>

          <div className="space-y-6">
            {analysis ? (
              <>
                <div className="bg-white rounded-lg border border-gray-200 p-1">
                  <div className="flex space-x-1">
                    {tabs.map((tab) => (
                      <button
                        key={tab.id}
                        onClick={() => setActiveView(tab.id as ViewMode)}
                        className={`flex items-center space-x-2 px-4 py-3 rounded-lg font-medium transition-all duration-200 flex-1 justify-center ${
                          activeView === tab.id
                            ? 'bg-blue-600 text-white shadow-sm'
                            : 'text-gray-600 hover:text-gray-800 hover:bg-gray-100'
                        }`}
                      >
                        <tab.icon className="w-4 h-4" />
                        <span className="hidden sm:inline">{tab.label}</span>
                      </button>
                    ))}
                  </div>
                </div>

                <div className="min-h-96">
                  {activeView === 'explanation' && <ExplanationView analysis={analysis} />}
                  {activeView === 'flowchart' && <FlowchartView nodes={analysis.flowchart} />}
                  {activeView === 'animation' && (
                    <AnimationView 
                      steps={analysis.animation}
                      executionState={executionState}
                      onStateChange={setExecutionState}
                    />
                  )}
                </div>
              </>
            ) : (
              <div className="flex items-center justify-center h-96 bg-white rounded-lg border border-gray-200">
                <div className="text-center">
                  <Code2 className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Ready to Learn Python!</h3>
                  <p className="text-gray-500 max-w-sm">
                    Paste Python code in the editor (or try the examples in the Explanation tab) to see beginner-friendly explanations, visual flowcharts, and step-by-step animations.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;